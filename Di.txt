--- Информация по синтаксису языка ---

{# - Комментарии}
# - символ коментариев
a = 1 # set variable a
#a=1
a = 'set # 123'
#a='set # 123'

{ #{ - }# - Комментарии произвольного размера}
#{ Комментарии произвольного размера }#
a #{Создаём переменную a}# = 1 # и присваиваем значение 1
#a=1

{a - Неопределённые переменные}
b # объявление неопределённой переменной
#b=null
b = false
#b=false  # b.type=bool
a = b + 1
#a=1 # a = (false=0) + 1
b = true
#b=true

{a,b - Объявление групп переменных}
a, b, c; d
#[a=null, b=null, c=null, d=null]
a.group # вызов списка созданной группы
#[a, b, c]
a = 1, b = 2, c = 3
a.group.sum
#6

{@ - Указатель значения переменной}
b = 1
#b=1
a = @b + 1 # указатель на переменную
#a=2
b = 3
#b=3
a
#a=4 # изменение переменной по указателю
a = @c
#CURSOS_ERROR: неизвестный указатель '@c'


{$ @ - Использование переменных в тексте}
b = 3
#b=3
a = 2
#a=2
'Сумма: $b + $a'
#'Сумма: 3 + 2'
s = 'Указатель b=@b' # переменная может менять значение
#s='Указатель b=3'
b = 11
#b=11
s
#s='Указатель b=11'
s = 'Результат: ${b + a}'
#s='Результат: 13'
s = '2+2=${2+2}'
#s='2+2=4'
'Значение: @{b} - указатель'
#'Значение: 11 - указатель'
'Значение: @{b-1} - указатель'
#CURSOR_ERROR: Требуется одна переменная, а не операнд 'b-1'

{Типы переменных}
const: VAR = 1
bool : bVar = true | false
int  : iVar = 1 | 2 | 3 | 4 | 5
float: fVar = 1. | .3 | 5.2 | 3.14
str  : sVar = 'string ${b+5} - $b'
date : tVar = '2019-01-01' | '2019-01-01 10:00:00'
list : lVar = [1, 2, 3 |, 4 | 6, 5]
dict : dVar = {1: 3, 4: 1, 'd': , g}
coll : cVar = (1, 2)
db   : var = db{table1: [], table2: []}   # db:table1
obj  : oVar = Object(attr)

{bool - Булевая переменная}
bool b = true
#b=true # bool, exp
bBool = true # b<БУКВА>
#bBool=true # bool, no exp
b=2
#TYPE_ERROR: Неверный тип значения '2' для типа bool

{int - Целочисленная переменная}
int i = 1
#i=1 # int, exp
iInt = 1
#iInt=1 # int, no exp
...

{list - Список}
lVar = [1, 2, 3, 4-2, 5,]
#lVar=[1,2,3,2,5,null]
lVar:3 = 0
#lVar=[1,2,3,0,5,null]
lVar.len, lVar.max, lVar.min, lVar.sum

{dict - Словарь}
dict dDict = {1: 3, 4: 1, 'd': , t}
#dDict={'1':3,'4':1,'d':null,'t':null}
dDict:'d' = 5 | dDict:d = 5 | dDict.d = 5
dVar = dDict
dVar.len, dVar.max, dVar.min, dVar.sum, dVar.key, dVar.val
dVar = {} # пустой словарь
dVar.d = 3
# dVar={'d':3}
d = 5
dVar:$d = 5
# dVar={'d':3,'5':5}
dVar.int
#2
dVar.list
#['d','5']
var = [1,3,5]
var++
#[1,3,5,0]

{coll - Коллекция}
coll cVar = (1, 2)
cVar = (1,1,1)
#COLLECTION_ERROR: дубль '1'
cVar:1 = 1 | cVar.1 = 1
#cVar:1=1
cVar::2 = 2
#cVar:1=1
dVar.len, dVar.max, dVar.min, dVar.sum


{! - Не возвращать null}
b = null
#b=null
a = b!
#a=0

a
#a=null
b=
#b=0
c.def
#0

{Работа со списочными переменными}
str s = 'string'
s: | s. # отображение первого элемента
#'s'
def(s.)
#0
s::
#'string'
s:::-1 # реверсия
#'gnirts'

{Получить рандомное значение}
int: i = 1 \ 10 \ 2 - от одного до десяти с шагом 2
float: f = 1 \ 3 - от 1 до 3
float: f = \ 1 - от 0 до 1
int: i = 1 \ - от одного до максимального значения int

{Указание подтипов}
list(int) listing = [1, 3, 8]
list(list(int)) asd = [[],[4,6,2],[11,2]]
asd:3 = 1 # вызовет ошибку!
list(int) estre = [1,2,3]
estre:5 = 9
# estre = [1,2,3,0,0,9]

a = 3
r = a \ 10
:1
#null - null:1
a:
#null - null:0
:a
#null - null:null = null:0
1:
#1 - 1:0

{Получить список}
range:1:5
#[1,2,3,4]

{Сложные обращения}
45.8.3.str
#'8' - '45.8':3

{Преобразования}
int: a = 3
#a=3
str: a = 7
#a='7'
float(a = 7)
#CHANGE_TYPE_ERORR: Нельзя преобразовать int в str
a.float
#'7.0'

int dorr = 's'
#1 - так как один символ
int: sett = [1,2,3,4,5]
#5
int: json = {a: 1, b: 3}
#2
a = 'new'
dict: new = {'big natural':1, a:1, b:()}
new:'big natural' = 2

5.type
#int

'strew'.2 | 'strew':2
#'r'

{Противоположность/отрицание}
!a  : противоположность/отрицание значения a
a = !true = a=false
a = !1    = a=0
a = !87.2 = a=0.0
a = !0    = a=1
a = !'s'  = a=''
a = !''   = a=' '
a = ![2,3]= a=[0,0]

{Арифмитически операции}
a - b : вычитание
a + b  |  a & b : сложение
a * b : умножение
a ^ b : возведение в степень
a / b : деление
a % b : остаток от деления
-a  : отрицательный =0-a
a++ : добавляет 1 =a+1
a-- : убавляет 1 =a--
a -= b :
a += b :
a *= b :
a ^= b :
a /= b :
a %= b :

{Возвращение}
a | b | с : вернёт a или b или с - random: a : b
a & b : соединяет a и b
'1' + '2' = '3'
'1' & '2' = '12'

a = @b # указатель на переменную
a = a$(b+1)
a = a@{b}1
a = a@b

{Операции условий: (true|false)}
a == b : сравнение/равно
a >= b, a => b : больше либо равно
a <= b, a =< b : меньше либо равно
a <> b : не равно
a > b  : больше
a < b  : меньше
a << b : а содержится в b
a >> b : в a содержится b

a:b  : Получение элемента списка

a -> b = [5, 8] : Все значения в списке
# a=5, a=8

{Главные логические условия}
a && b : условие И
a || b : условие ИЛИ

a = 1, b = 2, c = 3
# a=1
# b=2
# c=3

a = 1, 2, 3
# a=1
# 2
# 3

[a, b, c] = [1, 2]
# a=1
# b=2
# c=null

Короткое условие:
a = (a == c) ? b : c

Условие:
if(a == 0) 
	a++ 
elseif(a == b) 
	a+=1 
else 
	str = 1

Цикл:
for(i -> lVar:a..b?2)
	a += i

Цикл по условию:
while(true) a++

do a++ while(true)

Функция:
fun AddOne(a) [a++, return(a)]

Класс:
class Object [a, b, c]

oTroll = Object(a=1, b=2, c=3)

class(int) [
	fun sqrt 
		return(me ** 0.5)
	]
	
value = 6.sqrt
value.sqrt

{работа со структурными объектами: str}

{{Структура кода Di}}

Базовые алгоритмы:
# Развлетвления:
if(): [:elsif(): :else: ]
if:{условие1: , условие2: } [:else: ]
when(a): {значение1: , значение2: } [:else: ]
# Циклы:
for(a->list): # конечный цикл
while(bool):
do: [:while():]
# Многопоточность:
strim():
# Объявление
int:

Базовые функции:


Пример кода:
-------------------------------------------------------
import: module{alias: addNewAlias}

fun: add(enum(int): items) = sum(items)
# fun add = sum(enum(int): @items)

fun: del(int: first, int: last) = {
        if(first - last < 0): return: 0; else: {return: first - last}
        # return: (del = first - last) < 0 ? 0 : del
        # (del = first - last) < 0 ? 0 : del
    }

enter:
    print: 'start program'

    int: a = input('parameter $(self.name): '),  # self.name = 'a'
         b = input('parameter $(self.name): ')   # self.name = 'b'
         # enum(int): a, b <=> input(enum: 'parameter $(self.name): ' * 2)

    print: 'sum a = $a and b = $b: $(add(a, b))'
    # print: 'sum a = $a and b = $b: ' + add(a, b)

    print: 'del a - b = ' + del

    str: text = inputs('input multitext:\n')

    list(str): strings = text.strings
    print: 'first string: "$(strings:)"'
    print: 'last string: "$(strings:\1)"'
    # print: 'last string: "$(text.strings:\1)"'

exit:
    print: 'exit program'

-----------------------------------------------

eNum = 1, 2, 3, int: a = 0, a = 5, b += 3, for(i -> 1..10): a++
eNum += 1
cLoo = (1, 4, 7)

eList = [1, 2, 3, 4] == [1; 2; 3; 4]

eList = [1, 2, 3; 4]
eList: = enum: 1, 2, 3

lList = [1; 2; 3;] <> [1, 2, 3, ]

# создание новых операций
operand(+): /+ = {
    priority : 21;
    list, dict, enum, coll :
            for(item -> @first):
                item += @second:
    str :
        @second + @first
    }

operand(-): /- = {
    priority : 21;
    list, dict, enum, coll :
         for(item -> @first):
             item -= @second:
    str :
     @second - @first
    }

# Создание целочисленного деления с округлением
operand: // = {
    priority : 20;
    int, float :
        # return:
        round(@first.float / @second)
    }

c = (a = 45 // b = 23)
c = 2
c = (a = 45.1 // b = 23)
c = 2.0

------------------------------------------------
# Быстрое создание класса объектов
class: man = {int: @age = 18, str: @name = 'Noname'}

class: person = {
    str:
        @first, @middle, @last,
        first_name = uppName(first),
        middle_name = uppName(middle),
        last_name = uppName(middle);
    @age :: int: 0..150;
    @sex :: const:
        MAN = 'мужской',
        WOMAN = 'женский';
    get: # только получение
        list: @contacts

    private:
        fun: uppName(name :: str(1..100)) = {
            name:.upper!
            name:[1..].lower! }

    method: full_name = last_name & first_name & middle_name
    method: inicials = last_name & first_name: + '.' & middle_name: + '.'
    on_error:
            if(exception == ERROR_FORMAT_ATTRIBUTE):
                print: 'Неверный формат для сохранения данных:' & exception.message;
    method: add_phone(values :: str, enum(str), list(str), coll(str)) = {
        for(value -> values):
            contacts += {'typeof': 'phone', 'contact': value}; };
    method: add_mail(value :: str: format('[a..Z,0..1,.]@[a..Z,0..1].[a..Z]')) = {
        contacts += {'typeof': 'email', 'contact': value}; }
    method: add_site(value :: str: format('[a..Z,0..1,.,/]')) = {
        contacts += {'typeof': 'site', 'contact': value}; }
    method: print_contacts = {
        print: 'Контактные данные:';
        for (contact -> contacts): print: '\n - $(contact.typeof): $(contact.contact)'}
    method: print_info = {
        print: 'ФИО: $(self.fullname)\nПол: $(sex)\nВозраст: $(age)\n' + self.print_contacts; }
}

dima = person('Дмитрий', 'Анатольевич', 'Поварницын', age=37, sex=MAN)
with(dima):
    print: .full_name & '-' & .inicials,
    .add_mail('dimkray@mail.ru'),
    .add_phone('+7-911-96-65-111','222-333-44'),
    .add_site('vk.com/dimkray'),
    print: .print_contacts;


Проверка синтаксиса
------------------------------------------------------------------------
dima = person('Дмитрий', 'Анатольевич', 'Поварницын', age=37, sex=MAN)
with(dima):
    print: .full_name & '-' & .inicials,
    .add_mail('dimkray@mail.ru'),
    .add_phone('+7-911-96-65-111','222-333-44'),
    .add_site('vk.com/dimkray'),
    print: .print_contacts;
------------------------------------------------------------------------
[var:dima][:=][fun:person(]
                [val:0],[val:1],[val:2],[[val:age][:=][val:3]],[[val:sex]=[val:MAN]]
[basic:with(]
    [var:dima]
        [#print:]
            [var:dima]             [oper:&][val:4][oper:&][var:dima]
                [method:full_name]                            [method:inicials],
    ...